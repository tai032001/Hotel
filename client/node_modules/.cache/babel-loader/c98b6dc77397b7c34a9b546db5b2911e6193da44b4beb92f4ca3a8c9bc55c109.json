{"ast":null,"code":"var _jsxFileName = \"D:\\\\BookingHotel\\\\client\\\\src\\\\screen\\\\DashBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Room from \"../components/Room\";\nimport Loading from \"../components/Loading.tsx\";\nimport moment from \"moment\";\nimport { DatePicker } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  RangePicker\n} = DatePicker;\nfunction DashBoard() {\n  _s();\n  const [room, setRoom] = useState([]);\n  const [loading, setLoading] = useState();\n  const [fromDate, setFromDate] = useState();\n  const [toDate, setToDate] = useState();\n  const [duplicateRoom, setDuplicateRoom] = useState([]);\n\n  // const checkDate = (date) => {\n  //   let tempRooms = [];\n  //   let availability = false;\n\n  //   //if fromdate or todate equal input then not show unavailable room\n  //   for (const room of duplicateRoom) {\n  //     if (room.currentbookings.length > 0) {\n  //       for (const booking of room.currentbookings) {\n  //         if (\n  //           //check input date is between in db\n  //           !moment(moment(date[0].$d).format(\"DD-MM-YYYY\")).isBetween(\n  //             booking.fromdate,\n  //             booking.todate\n  //           ) &&\n  //           !moment(moment(date[1].$d).format(\"DD-MM-YYYY\")).isBetween(\n  //             booking.fromdate,\n  //             booking.todate\n  //           )\n  //         )\n  //           if (\n  //             //if fromdate/todate input different than value from/todate in db\n  //             moment(date[0].$d).format(\"DD-MM-YYYY\") !== booking.fromdate &&\n  //             moment(date[0].$d).format(\"DD-MM-YYYY\") !== booking.todate &&\n  //             moment(date[1].$d).format(\"DD-MM-YYYY\") !== booking.fromdate &&\n  //             moment(date[1].$d).format(\"DD-MM-YYYY\") !== booking.todate\n  //           )\n  //             //then can room available\n  //             availability = true;\n  //       }\n  //     }\n  //     if (availability === true || room.currentbookings.length === 0) {\n  //       tempRooms.push(room);\n  //     }\n  //     setRoom(tempRooms);\n  //   }\n  // };\n  const filterByDate = date => {\n    setFromDate(moment(date[0].$d).format(\"DD-MM-YYYY\"));\n    setToDate(moment(date[1].$d).format(\"DD-MM-YYYY\"));\n    let tempRooms = [];\n    let availability = false;\n\n    //if fromdate or todate equal input then not show unavailable room\n    for (let room of duplicateRoom) {\n      if (room.currentbookings.length > 0) {\n        for (let booking of room.currentbookings) {\n          if (\n          //check input date is between in db\n          moment(fromDate).isBetween(booking.fromdate, booking.todate) && moment(toDate).isBetween(booking.fromdate, booking.todate)) if (\n          //if fromdate/todate input different than value from/todate in db\n          fromDate !== booking.fromdate && fromDate !== booking.todate && toDate !== booking.fromdate && toDate !== booking.todate)\n            //then can room available\n            availability = true;\n        }\n      }\n      if (availability === true || room.currentbookings.length === 0) {\n        tempRooms.push(room);\n      }\n      setRoom(tempRooms);\n    }\n  };\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setLoading(true);\n        const res = await axios.get(\"//localhost:5000/api/room/getallrooms\");\n        setRoom(res.data);\n        setDuplicateRoom(res.data);\n        console.log(duplicateRoom);\n        setLoading(false);\n      } catch (error) {\n        // setError(true);\n        console.log(error);\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-3\",\n        children: /*#__PURE__*/_jsxDEV(RangePicker, {\n          format: \"DD-MM-YYYY\",\n          onChange: filterByDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center mt-5\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this) : room.map(room => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-9 mt-2\",\n          children: /*#__PURE__*/_jsxDEV(Room, {\n            room: room,\n            fromDate: fromDate,\n            toDate: toDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(DashBoard, \"Lypy1h3lCHH0eFNXmO6aX8jo1Rw=\");\n_c = DashBoard;\nexport default DashBoard;\nvar _c;\n$RefreshReg$(_c, \"DashBoard\");","map":{"version":3,"names":["React","useEffect","useState","axios","Room","Loading","moment","DatePicker","RangePicker","DashBoard","room","setRoom","loading","setLoading","fromDate","setFromDate","toDate","setToDate","duplicateRoom","setDuplicateRoom","filterByDate","date","$d","format","tempRooms","availability","currentbookings","length","booking","isBetween","fromdate","todate","push","fetchData","res","get","data","console","log","error","map"],"sources":["D:/BookingHotel/client/src/screen/DashBoard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Room from \"../components/Room\";\r\nimport Loading from \"../components/Loading.tsx\";\r\nimport moment from \"moment\";\r\nimport { DatePicker } from \"antd\";\r\nconst { RangePicker } = DatePicker;\r\n\r\nfunction DashBoard() {\r\n  const [room, setRoom] = useState([]);\r\n  const [loading, setLoading] = useState();\r\n  const [fromDate, setFromDate] = useState();\r\n  const [toDate, setToDate] = useState();\r\n  const [duplicateRoom, setDuplicateRoom] = useState([]);\r\n\r\n  // const checkDate = (date) => {\r\n  //   let tempRooms = [];\r\n  //   let availability = false;\r\n\r\n  //   //if fromdate or todate equal input then not show unavailable room\r\n  //   for (const room of duplicateRoom) {\r\n  //     if (room.currentbookings.length > 0) {\r\n  //       for (const booking of room.currentbookings) {\r\n  //         if (\r\n  //           //check input date is between in db\r\n  //           !moment(moment(date[0].$d).format(\"DD-MM-YYYY\")).isBetween(\r\n  //             booking.fromdate,\r\n  //             booking.todate\r\n  //           ) &&\r\n  //           !moment(moment(date[1].$d).format(\"DD-MM-YYYY\")).isBetween(\r\n  //             booking.fromdate,\r\n  //             booking.todate\r\n  //           )\r\n  //         )\r\n  //           if (\r\n  //             //if fromdate/todate input different than value from/todate in db\r\n  //             moment(date[0].$d).format(\"DD-MM-YYYY\") !== booking.fromdate &&\r\n  //             moment(date[0].$d).format(\"DD-MM-YYYY\") !== booking.todate &&\r\n  //             moment(date[1].$d).format(\"DD-MM-YYYY\") !== booking.fromdate &&\r\n  //             moment(date[1].$d).format(\"DD-MM-YYYY\") !== booking.todate\r\n  //           )\r\n  //             //then can room available\r\n  //             availability = true;\r\n  //       }\r\n  //     }\r\n  //     if (availability === true || room.currentbookings.length === 0) {\r\n  //       tempRooms.push(room);\r\n  //     }\r\n  //     setRoom(tempRooms);\r\n  //   }\r\n  // };\r\n  const filterByDate = (date) => {\r\n    setFromDate(moment(date[0].$d).format(\"DD-MM-YYYY\"));\r\n    setToDate(moment(date[1].$d).format(\"DD-MM-YYYY\"));\r\n    let tempRooms = [];\r\n    let availability = false;\r\n\r\n    //if fromdate or todate equal input then not show unavailable room\r\n    for (let room of duplicateRoom) {\r\n      if (room.currentbookings.length > 0) {\r\n        for (let booking of room.currentbookings) {\r\n          if (\r\n            //check input date is between in db\r\n            moment(fromDate).isBetween(booking.fromdate, booking.todate) &&\r\n            moment(toDate).isBetween(booking.fromdate, booking.todate)\r\n          )\r\n            if (\r\n              //if fromdate/todate input different than value from/todate in db\r\n              fromDate !== booking.fromdate &&\r\n              fromDate !== booking.todate &&\r\n              toDate !== booking.fromdate &&\r\n              toDate !== booking.todate\r\n            )\r\n              //then can room available\r\n              availability = true;\r\n        }\r\n      }\r\n      if (availability === true || room.currentbookings.length === 0) {\r\n        tempRooms.push(room);\r\n      }\r\n      setRoom(tempRooms);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        setLoading(true);\r\n        const res = await axios.get(\"//localhost:5000/api/room/getallrooms\");\r\n        setRoom(res.data);\r\n        setDuplicateRoom(res.data);\r\n        console.log(duplicateRoom);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        // setError(true);\r\n        console.log(error);\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row mt-5\">\r\n        <div className=\"col-md-3\">\r\n          <RangePicker format={\"DD-MM-YYYY\"} onChange={filterByDate} />\r\n        </div>\r\n      </div>\r\n      <div className=\"row justify-content-center mt-5\">\r\n        {loading ? (\r\n          <h1>\r\n            <Loading />\r\n          </h1>\r\n        ) : (\r\n          room.map((room) => {\r\n            return (\r\n              <div className=\"col-md-9 mt-2\">\r\n                <Room room={room} fromDate={fromDate} toDate={toDate} />\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DashBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}